name: cpp-cmake-mingw-prebuilt-release-actions-workflow
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*'

jobs:
  build:
    name: Create Release
    runs-on: windows-latest
    env:
      libraryName: unzip
      installationPath: unzip-installation
      tagName: zip-22 # later
      mingwTargetZip: unzip-${{ github.ref_name }}-mingw64-x86_64-posix-seh-rev0-8.1.0.zip
    steps:
      - uses: actions/checkout@v4
        with:
          repository: apple-oss-distributions/zip
          path: zip
          ref: ${{ env.tagName }}
          submodules: true

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: make autoconf automake libtool autogen perl patch
          
      - name: curl x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
        shell: cmd
        run: |
          curl https://github.com/dirkarnez/cpp-tools/raw/main/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z -L -O -J &&^
          7z.exe x x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z

      - shell: msys2 {0}
        run: mkdir -pv ${{ env.installationPath }}
        
      - name: set PATH, check mingw version, cmake generate, build and install
        shell: msys2 {0}
        run: |
            workspace=$(pwd) &&
            export PATH="$workspace/mingw64:$workspace/mingw64/bin:$workspace/msys64/usr/bin:/usr/bin" &&
            cd zip && 
            cd unzip &&
            sed -i "s/^ifndef .*$//g" Makefile  &&
            sed -i "s/^CoreOSMakefiles.*$//g" Makefile &&
            sed -i "s/^endif.*$//g" Makefile &&
            sed -i "s/^include.*CoreOS\/Standard\/Standard.make$//g" Makefile &&
            g++ --version && 
            make unpacksrc patchsrc && 
            cd obj &&
            cd unzip60 && 
            make CC_CPU_OPT="-march=x86-64" NOASM=1 -f win32/Makefile.gcc lib &&
            ls -R

             xcopy /H /Y /C "liblspcpp.a" "export\liblspcpp\lib"
      - shell: cmd
        run: |
          mkdir "lib" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\libunzip32.a" "${{ env.installationPath }}\lib\" &&^
          mkdir "include\win32" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\unzip.h" "${{ env.installationPath }}\include\" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\unzpriv.h" "${{ env.installationPath }}\include\" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\globals.h" "${{ env.installationPath }}\include\" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\win32\w32cfg.h" "${{ env.installationPath }}\include\win32\" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\crypt.h" "${{ env.installationPath }}\include\" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\unzvers.h" "${{ env.installationPath }}\include\" &&^
          xcopy /H /Y /C "zip\unzip\obj\unzip60\consts.h" "${{ env.installationPath }}\include\"
          
      - shell: cmd
        run: dir /s
        working-directory: ${{ env.installationPath }}
        
      # - name: set PATH, check mingw version, cmake generate, build and install
      #   shell: cmd
      #   run: |
      #       set PATH=^
      #       ${{ github.workspace }}\mingw64;^
      #       ${{ github.workspace }}\mingw64\bin;^
      #       ${{ github.workspace }}\PortableGit-2.38.1-64-bit\bin;^
      #       ${{ github.workspace }}\cmake-3.24.0-windows-x86_64\bin;
      #       set CD_LINUX=%CD:\=/%
      #       gcc --version &&^
      #       cd unzip60 &&^
      #       mingw32-make CC_CPU_OPT="" NOASM=1 -f win32/makefile.gcc
            
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "${{ env.installationPath }}"
          filename: "${{ env.mingwTargetZip }}"
        
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.installationPath }}/${{ env.mingwTargetZip }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
